/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inicio_sesion;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import usuario_pkg.usuario_registrado;

/**
 *
 * clase para abstraer el boilerplate de conectarse a la base de datos
 * IMPORTANTE: 
 */
public class conexion_bd {
    private usuario_registrado usuario = null;
    
    // diferentes constructores para ingresar valores de usuario
    public conexion_bd(usuario_registrado usuario){
        this.usuario = usuario;
        this.conectar();
    }
    
    public conexion_bd(String nombre, String contrasena){
        this.usuario.setNombre(nombre);
        this.usuario.setContrasena(contrasena);
        this.conectar();
    }
    
    public ResultSet conectar(){
        /*
        Recuerda añadir el JAR de mysql connector a run/set project configuration/libraries/add JAR folder
        */
        
        Connection conexion = null;
        /*
        https://docs.oracle.com/javase/8/docs/api/java/sql/Connection.html
        A connection (session) with a specific database. SQL statements are 
        executed and results are returned within the context of a connection.

        A Connection object's database is able to provide information describing
        its tables, its supported SQL grammar, its stored procedures, 
        the capabilities of this connection, and so on. This information is 
        obtained with the getMetaData method. 
        */
        PreparedStatement sentencia_preparada = null;
        /*
        https://docs.oracle.com/javase/8/docs/api/java/sql/Statement.html
        https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
        The object used for executing a static SQL statement and returning the 
        results it produces.

        A prepared statement is An object that represents a precompiled SQL statement.

        A SQL statement is precompiled and stored in a PreparedStatement object. 
        This object can then be used to efficiently execute this statement 
        multiple times. 
        
        By default, only one ResultSet object per Statement object can be open 
        at the same time. Therefore, if the reading of one ResultSet object is
        interleaved with the reading of another, each must have been generated 
        by different Statement objects. All execution methods in the Statement 
        interface implicitly close a current ResultSet object of the statement 
        if an open one exists.
        */
        ResultSet query = null;
        /*
        https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html
        A table of data representing a database result set, which is usually
        generated by executing a statement that queries the database.

        A ResultSet object maintains a cursor pointing to its current row of 
        data. Initially the cursor is positioned before the first row. The next 
        method moves the cursor to the next row, and because it returns false 
        when there are no more rows in the ResultSet object, it can be used in
        a while loop to iterate through the result set.

        A default ResultSet object is not updatable and has a cursor that moves 
        forward only. Thus, you can iterate through it only once and only from
        the first row to the last row. 
        */
        
        // TODO: ClassNotFoundException com.mysql.jdbc.Driver
        // https://stackoverflow.com/questions/2839321/connect-java-to-a-mysql-database
        // https://stackoverflow.com/questions/1585811/classnotfoundexception-com-mysql-jdbc-driver
        
        String querySelectSQL = "SELECT nombre, contrasena, ID FROM usuario WHERE nombre = ? AND contrasena = ?;";
        
        try{
            conexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/usuarios","root", "");
            sentencia_preparada = conexion.prepareStatement(querySelectSQL);
            // orden de sentencias/query desde el string de conexion (1 = nombre, 2= contraseña)
            // sets the String value to the given parameter index.
            sentencia_preparada.setString(1, this.usuario.getNombre());
            sentencia_preparada.setString(2, this.usuario.getContrasena());
            // executes the select query. It returns an instance of ResultSet.
            // https://stackoverflow.com/questions/24692296/how-to-use-prepared-statement-for-select-query-in-java
            /*
            when you pass in a string to executeQuery() that query is executed 
            literally and thus the ? is send to the database which then creates
            the error. By passing query string you are not execution the "cached"
            prepared statement for which you passed the values.
            */
            query = sentencia_preparada.executeQuery();
            return query;
            
        }catch (SQLException ex){
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
            System.out.println();
        }
        catch (Exception e){
            // JOptionPane.showMessageDialog(rootPane, e);
            System.out.println(e);
            System.out.println();
            e.printStackTrace();
        }
        // si la app falla en conectarse, regresara null
        return null;
    }
}
