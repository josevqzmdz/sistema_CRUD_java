/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package usuario_menu;

import usuario_pkg.usuario_registrado;
import java.sql.*;
import javax.swing.JOptionPane;

/**
 *
 * @author royer
 */
public class modificar_jframe extends javax.swing.JFrame {

    // TODO: encontrar forma de pasar valores de objeto usuario sin utilizar
    // una variable global
    private usuario_registrado usuario = null;
    /**
     * Creates new form modificar_jframe
     */
    public modificar_jframe() {
        initComponents();
    }
    
    public modificar_jframe(usuario_registrado usuario){
        initComponents();
        this.usuario = usuario;
        this.nombre_txt.setText(usuario.getNombre());
        this.ID_txt.setText(usuario.getID());
        this.contrasena_txt.setText(usuario.getContrasena());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombre_txt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ID_txt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        contrasena_txt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        modificar_btn = new javax.swing.JButton();
        cancelar_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("nombre");

        jLabel2.setText("ID");

        jLabel3.setText("contraseña");

        modificar_btn.setText("modificar");
        modificar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificar_btnActionPerformed(evt);
            }
        });

        cancelar_btn.setText("cancelar");
        cancelar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modificar_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                        .addComponent(cancelar_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contrasena_txt)
                            .addComponent(ID_txt)
                            .addComponent(nombre_txt))))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ID_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(contrasena_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificar_btn)
                    .addComponent(cancelar_btn))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void modificar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificar_btnActionPerformed
        // TODO add your handling code here:
        // boton modificar
        
        Connection conexion = null;
        PreparedStatement sentencia_preparada = null;
        ResultSet query = null;
        
        // https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement
        // https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html
        // https://www.javatpoint.com/PreparedStatement-interface
        try{
            
            conexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/usuarios","root", "");
            // query parametrizado, mejor protegido contra inyeccion SQL
            String querySelectSQL = "SELECT nombre, contrasena FROM usuario WHERE nombre = ? AND contrasena = ?;";
            sentencia_preparada = conexion.prepareStatement(querySelectSQL);
            // orden de sentencias/query desde el string de conexion (1 = nombre, 2= contraseña)
            // sets the String value to the given parameter index.
            sentencia_preparada.setString(1, usuario.getNombre());
            sentencia_preparada.setString(2, usuario.getContrasena());
            // executes the select query. It returns an instance of ResultSet.
            // https://stackoverflow.com/questions/24692296/how-to-use-prepared-statement-for-select-query-in-java
            /*
            when you pass in a string to executeQuery() that query is executed 
            literally and thus the ? is send to the database which then creates
            the error. By passing query string you are not execution the "cached"
            prepared statement for which you passed the values.
            */
            query = sentencia_preparada.executeQuery();
            
            if(query.next()){
                // TODO: implementar 
            
                System.out.println("conexion establecida");
            
                // utiliza el metodo equals con una operacion ternaria para evitar nullpointerexception
                // si y solo si el textfield de nombre ha cambiado
                
                // NOMBRE
                if(this.nombre_txt.getText() == null ? usuario.getNombre() != null : !this.nombre_txt.getText().equals(usuario.getNombre())){
                    String queryInsertSQL = "UPDATE usuario SET nombre = ? WHERE nombre = ?";
                    sentencia_preparada = conexion.prepareStatement(queryInsertSQL);
                    sentencia_preparada.setString(1, this.nombre_txt.getText());
                    sentencia_preparada.setString(2, usuario.getNombre());
                    // executes the query. It is used for create, drop, insert, update, delete etc.
                    sentencia_preparada.executeUpdate();
                    System.out.println("nombre cambiado exitosamente");
                    System.out.println();
                    JOptionPane.showMessageDialog(rootPane, "nombre cambiado exitosamente");
                    usuario.setNombre(this.nombre_txt.getText());
                    this.cancelar_btn.setText("salir");
                
                // CONTRASEÑA
                }else if(this.contrasena_txt.getText() == null ? usuario.getContrasena() != null : !this.contrasena_txt.getText().equals(usuario.getContrasena())){
                    String queryInsertSQL = "UPDATE usuario SET contrasena = ? WHERE contrasena = ?";
                    sentencia_preparada = conexion.prepareStatement(queryInsertSQL);
                    sentencia_preparada.setString(1, this.contrasena_txt.getText());
                    sentencia_preparada.setString(2, usuario.getContrasena());
                    // executes the query. It is used for create, drop, insert, update, delete etc.
                    sentencia_preparada.executeUpdate();
                    System.out.println("contraseña cambiado exitosamente");
                    System.out.println();
                    JOptionPane.showMessageDialog(rootPane, "contraseña cambiado exitosamente");
                    usuario.setContrasena(this.contrasena_txt.getText());
                    this.cancelar_btn.setText("salir");
                    
                // ID
                }else if(this.ID_txt.getText() == null ? usuario.getID() != null : !this.ID_txt.getText().equals(usuario.getID())){
                    String queryInsertSQL = "UPDATE usuario SET ID = ? WHERE ID = ?";
                    sentencia_preparada = conexion.prepareStatement(queryInsertSQL);
                    sentencia_preparada.setString(1, this.ID_txt.getText());
                    sentencia_preparada.setString(2, usuario.getID());
                    // executes the query. It is used for create, drop, insert, update, delete etc.
                    sentencia_preparada.executeUpdate();
                    System.out.println("ID cambiado exitosamente");
                    System.out.println();
                    JOptionPane.showMessageDialog(rootPane, "ID cambiado exitosamente");
                    usuario.setID(this.ID_txt.getText());
                    this.cancelar_btn.setText("salir");
                }                
                else{
                    // TODO: implementar sistema que cambie todos los valores de un golpe, y modificar los valores del usuario
                    // aqui solo cambia el nombre
                 
                    // si se quiere cambiar todos los valores del usuario al mismo tiempo
                    // bastantes ifs que checan que todos los datos hayan sido alterados
                    if (this.nombre_txt.getText() != "" && this.ID_txt.getText() != "" && this.contrasena_txt.getText() != ""){
                        if(this.nombre_txt.getText() == null ? usuario.getNombre() != null : !this.nombre_txt.getText().equals(usuario.getNombre())){
                            if(this.contrasena_txt.getText() == null ? usuario.getContrasena() != null : !this.contrasena_txt.getText().equals(usuario.getContrasena())){
                                if(this.ID_txt.getText() == null ? usuario.getID() != null : !this.ID_txt.getText().equals(usuario.getID())){
                                    
                                    String queryInsertSQL = "UPDATE usuario SET nombre= ?, contrasena = ?, ID = ? WHERE nombre= ?, contrasena = ?, ID = ?";
                                    sentencia_preparada = conexion.prepareStatement(queryInsertSQL);
                                    sentencia_preparada.setString(1, this.nombre_txt.getText());
                                    sentencia_preparada.setString(2, this.contrasena_txt.getText());
                                    sentencia_preparada.setString(3, this.ID_txt.getText());
                                    sentencia_preparada.setString(4, usuario.getNombre());
                                    sentencia_preparada.setString(5, usuario.getContrasena());
                                    sentencia_preparada.setString(6, usuario.getID());
                                    // executes the query. It is used for create, drop, insert, update, delete etc.
                                    sentencia_preparada.executeUpdate();
                                    System.out.println("todos los valores han sido cambiados exitosamente");
                                    System.out.println();
                                    JOptionPane.showMessageDialog(rootPane, "todos los valores han sido cambiados exitosamente");
                            }
                        }
                    }else{
                        System.out.println("datos identicos y/o conexion fallida");
                JOptionPane.showMessageDialog(rootPane, "datos identicos y/o conexion fallida");
                    }
                    }else{
                        System.out.println("no se permite introducir ningun valor en los campos de texto");
                        JOptionPane.showMessageDialog(rootPane, "no se permite introducir ningun valor en los campos de texto" );
                    }
                    
                }
            }else{
                System.out.println("datos identicos y/o conexion fallida");
                JOptionPane.showMessageDialog(rootPane, "datos identicos y/o conexion fallida");
            }
       
        }catch (SQLException ex){
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
            System.out.println();
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
            System.out.println(e);
            e.printStackTrace();
        }
        finally{
            if (conexion != null){
                try{
                    query.close();
                    sentencia_preparada.close();
                    conexion.close();
                }catch (SQLException e){
                    e.printStackTrace();
                }
            }
        }
        
    }//GEN-LAST:event_modificar_btnActionPerformed

    private void cancelar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar_btnActionPerformed
        // TODO add your handling code here:
        // boton para cancelar el proceso y regresar al menu, o salir una vez hecho el proceso
        menu menu = new menu(usuario);
        menu.setVisible(true);
        dispose();
    }//GEN-LAST:event_cancelar_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(modificar_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(modificar_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(modificar_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(modificar_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new modificar_jframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ID_txt;
    private javax.swing.JButton cancelar_btn;
    private javax.swing.JTextField contrasena_txt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton modificar_btn;
    private javax.swing.JTextField nombre_txt;
    // End of variables declaration//GEN-END:variables
}
