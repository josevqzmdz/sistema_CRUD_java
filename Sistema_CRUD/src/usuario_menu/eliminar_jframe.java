/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package usuario_menu;

import inicio_sesion.conexion_bd;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import usuario_pkg.usuario_registrado;

/**
 *
 * menu para eliminar usuarios
 * TODO: hacer todo el codigo :v
 */
public class eliminar_jframe extends javax.swing.JFrame {

    /**
     * Creates new form eliminar_jframe
     */
    
    usuario_registrado usuario = null;
    
    public eliminar_jframe() {
        initComponents();
    }
    
    public eliminar_jframe(usuario_registrado usuario) {
        initComponents();
        this.usuario = usuario;
        this.insertar_valores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        eliminar_btn = new javax.swing.JButton();
        cancelar_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "nombre", "ID", "contrase√±a"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaUsuarios.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaUsuarios);

        eliminar_btn.setText("eliminar");
        eliminar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_btnActionPerformed(evt);
            }
        });

        cancelar_btn.setText("cancelar");
        cancelar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eliminar_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelar_btn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(77, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eliminar_btn)
                    .addComponent(cancelar_btn))
                .addGap(80, 80, 80))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eliminar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_btnActionPerformed
        // TODO: encontrar forma de eliminar solo el usuario seleccionado
        // https://docs.oracle.com/javase/7/docs/api/javax/swing/JTable.html
        // https://www.youtube.com/watch?reload=9&v=pXCAHUFSyg0
        // boton que elimina TODO los datos del usuario seleccionado
        
        Connection conexion = null;
        PreparedStatement sentencia_preparada = null;
        Statement sentencia = null;
        ResultSet query = null;
        
        try{
            // conexion sencilla a la base de datos
            // https://www.javatpoint.com/example-to-connect-to-the-mysql-database
            // query DELETE: https://www.tutorialspoint.com/mysql/mysql-delete-query.htm
            conexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/usuarios","root", "");
            String sqlQuery = "SELECT * FROM usuario";
            sentencia = conexion.createStatement();
            query = sentencia.executeQuery(sqlQuery);
            
            // metodo para eliminar el usuario seleccionado
            DefaultTableModel modelo = (DefaultTableModel) this.tablaUsuarios.getModel();
            // regresa el indice donde se ubica la seleccion
            // 
            int[] filas = tablaUsuarios.getSelectedRows();
            // getselectedrows empieza desde 0 (como un arreglo)
            for (int i=0; i < filas.length; i++){
                String nombre = modelo.getValueAt(filas[i] - i, 0 ).toString();
                String ID = modelo.getValueAt(filas[i] - i, 1).toString();
                
                // si el usuario esta a punto de eliminarse a si mismo, preguntar si quiere continuar
                if (nombre.equals(usuario.getNombre()) && ID.equals(usuario.getID())){
                    
                    
                }
                System.out.println(nombre+", "+ID);
                modelo.removeRow(filas[i] - i);
                // https://www.tutorialspoint.com/mysql/mysql-delete-query.htm
                String sqlDelete = "DELETE FROM usuario WHERE nombre = ? AND ID = ?";
                sentencia_preparada = conexion.prepareStatement(sqlDelete);
                sentencia_preparada.setString(1, nombre);
                sentencia_preparada.setString(2, ID);
                sentencia_preparada.executeUpdate();
                System.out.println("usuario "+nombre+" ID "+ID+" eliminado exitosamente");
                JOptionPane.showMessageDialog(rootPane, "usuario "+nombre+" ID "+ID+" eliminado exitosamente");
                System.out.println();
                this.cancelar_btn.setText("salir");
            }            

        }catch (SQLException ex){
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
            System.out.println();
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
            System.out.println(e);
            e.printStackTrace();
        }
        finally{
            if (conexion != null){
                try{
                    query.close();
                    sentencia.close();
                    sentencia_preparada.close();
                    conexion.close();
                }catch (SQLException e){
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_eliminar_btnActionPerformed

    private void cancelar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar_btnActionPerformed
        // TODO add your handling code here:
        // boton para regresar al menu
        
        menu menu = new menu(usuario);
        menu.setVisible(true);
        dispose();
        
    }//GEN-LAST:event_cancelar_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(eliminar_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(eliminar_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(eliminar_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(eliminar_jframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new eliminar_jframe().setVisible(true);
                
            }
        });
    }
    
    // metodo para insertar valores en la tabla
    // jtable: https://docs.oracle.com/javase/7/docs/api/javax/swing/JTable.html
    private void insertar_valores(){
        
        Connection conexion = null;
        PreparedStatement sentencia_preparada = null;
        ResultSet query = null;
        
        // https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement
        // https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html
        // https://www.javatpoint.com/PreparedStatement-interface
        // https://stackoverflow.com/questions/45896437/how-display-in-jtable-the-data-from-mysql
        try{          
            // https://www.programcreek.com/java-api-examples/javax.swing.table.DefaultTableModel
            // https://www.geeksforgeeks.org/java-swing-jtable/
            // https://docs.oracle.com/javase/7/docs/api/javax/swing/JTable.html
            // https://docs.oracle.com/javase/7/docs/api/javax/swing/table/DefaultTableModel.html
            
            /*
            The JTable is used to display and edit regular two-dimensional tables of cells. 
            See How to Use Tables in The Java Tutorial for task-oriented documentation and
            examples of using JTable. 
            
            defaulttablemodel is an implementation of TableModel that uses a Vector of Vectors to store
            the cell value objects. 
            */
            
            DefaultTableModel tableModel = new DefaultTableModel();
            tableModel.setColumnIdentifiers(new String[]{"nombre", "ID", "contrase√±a"});
            this.tablaUsuarios.setModel(tableModel);
            
            conexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/usuarios","root", "");
            // query parametrizado, mejor protegido contra inyeccion SQL
            String querySelectSQL = "SELECT * FROM usuario;";
            sentencia_preparada = conexion.prepareStatement(querySelectSQL);
            query = sentencia_preparada.executeQuery();
            
            while(query.next()){
                String nombre = query.getString("nombre");
                String ID = query.getString("ID");
                String contrasena = query.getString("contrasena");
                
                String[] datos = {nombre, ID, contrasena};
                tableModel.addRow(datos);
            }
                        
        }catch (SQLException ex){
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
            System.out.println();
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
            System.out.println(e);
            System.out.println();
            e.printStackTrace();
        }
        finally{
            if (conexion != null){
                try{
                    query.close();
                    sentencia_preparada.close();
                    conexion.close();
                }catch (SQLException e){
                    e.printStackTrace();
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar_btn;
    private javax.swing.JButton eliminar_btn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaUsuarios;
    // End of variables declaration//GEN-END:variables
}